<?php

/**
 * @file
 * Enables content translation management.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\node\NodeInterface;

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function fsa_translate_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  // Get node identifier.
  $nid = $form_state->getFormObject()->getEntity()->id();

  // Query tracking table.
  $connection = \Drupal::database();
  $query = $connection->select('fsa_translation_required', 'f');
  $query->condition('nid', $nid);
  $query->addField('f', 'translation_required');
  $result = $query->execute();
  $translation_required = $result->fetchField();

  // Add entity meta details.
  $form['translation'] = [
    '#type' => 'container',
    '#group' => 'footer',
    'translation_required' => [
      '#type' => 'checkbox',
      '#title' => t('Translation required'),
      '#default_value' => $translation_required,
    ],
    'notify' => [
      '#type' => 'checkbox',
      '#title' => t('Notify translation team'),
      '#states' => array(
        'visible' => array(
          ':input[name="translation_required"]' => array('checked' => TRUE),
        ),
      ),
    ],
  ];

  // Add submit handler.
  foreach (array_keys($form['actions']) as $action) {
    if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
      $form['actions'][$action]['#submit'][] = 'fsa_translate_submit';
    }
  }
}

/**
 * Custom submit handler.
 */
function fsa_translate_submit(array $form, FormStateInterface $form_state) {

  // Get node.
  $node = $form_state->getFormObject()->getEntity();

  // Get translation required status.
  $translation_required = $form_state->getValue('translation_required');

  // Merge value into tracking table.
  $connection = \Drupal::database();
  $connection->merge('fsa_translation_required')
    ->key(['nid' => $node->id()])
    ->fields(['translation_required' => $translation_required])
    ->execute();

  // Notify translation team.
  if ($form_state->getValue('translation_required') && $form_state->getValue('notify')) {
    $mailManager = \Drupal::service('plugin.manager.mail');
    $module = 'fsa_translate';
    $key = 'translation_required';
    $config = \Drupal::config('config.fsa_translate');
    $to = $config->get('translation_required_mail_recipient');
    $params = $node;
    $langcode = \Drupal::currentUser()->getPreferredLangcode();
    $send = TRUE;
    $result = $mailManager->mail($module, $key, $to, $langcode, $params, NULL, $send);
    if ($result['result'] !== TRUE) {
      drupal_set_message(t('There was a problem notifying the translation team.'), 'error');
    }
    else {
      drupal_set_message(t('The translation team has been notified.'));
    }
  }

}

/**
 * Implements hook_mail().
 */
function fsa_translate_mail($key, &$message, $params) {
  switch ($key) {

    // Mail template.
    case 'translation_required':

      // Print sender address.
      $message['from'] = \Drupal::config('system.site')->get('mail');

      // Print subject.
      $config = \Drupal::config('config.fsa_translate');
      $message['subject'] = $config->get('translation_required_mail_subject');

      // Print body with replaced tokens.
      $text = $config->get('translation_required_mail_body');
      $data = ['node' => $params];
      $message['body'][] = \Drupal::token()->replace($text, $data);
      break;
  }
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 */
function fsa_translate_node_delete(NodeInterface $node) {

  // Delete row from tracking table.
  $connection = \Drupal::database();
  $connection->delete('fsa_translation_required')
    ->condition('nid', $node->id())
    ->execute();
}
