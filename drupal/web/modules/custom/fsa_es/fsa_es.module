<?php

use Drupal\views\Views;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_block_alter().
 *
 * Creates a copy of a search result view's exposed form block definition and
 * hands that to a custom block plugin which will only show relevant elements
 * on the search form.
 *
 * @param $info
 *
 * @see Drupal\fsa_es\Plugin\Block\ViewsExposedFilterSearchBlock
 */
function fsa_es_block_alter(&$info) {
  // @todo Make search related views block delta discoverable.
  $deltas = [
    'views_exposed_filter_block:search_global_ratings-page_1',
    'views_exposed_filter_block:search_global_guidance-page_1',
  ];

  foreach ($deltas as $delta) {
    if (isset($info[$delta])) {
      $info[$delta]['class'] = 'Drupal\fsa_es\Plugin\Block\ViewsExposedFilterSearchBlock';
    }
  }

}

/**
 * Implements hook_views_pre_render().
 *
 * Sends Ajax-enabled views results total so that this could be displayed
 * in a separate block.
 */
function fsa_es_views_pre_render(ViewExecutable $view) {
  // If using AJAX, send identifying data about this view.
  if ($view->ajaxEnabled() && empty($view->live_preview)) {
    $view->element['#attached']['library'][] = 'fsa_es/result_totals';
    $view->element['#attached']['drupalSettings']['fsa_es']['result_totals'] = [
      'keywords' => isset($view->filter['keyword']) ? $view->filter['keyword']->value : NULL,
      'depth' => $view->total_rows,
      'total' => $view->total_rows,
    ];
  }

  return $view;
}

/**
 * Implements hook_theme_suggestions_alter().
 *
 * Suggests a separate "block" template for views exposed filter blocks that
 * relate to search filters.
 *
 * Suggests a separate "views-view" template for global ratings search view.
 */
function fsa_es_theme_suggestions_alter(array &$suggestions, array $variables, $hook) {
  switch ($hook) {
    case 'block':
      // @todo Add block IDs that relate to global search filters.
      $block_ids = [
        'search_global_ratings_filters',
        'search_global_guidance_filters',
      ];

      if (in_array($variables['elements']['#id'], $block_ids, TRUE)) {
        $suggestions[] = 'block__' . $variables['elements']['#base_plugin_id'] . '__search_global_filters';
      }
      break;
    case 'views_view':
      $view = $variables['view'];

      if ($view->storage->id() == 'search_global_ratings') {
        $suggestions[] = 'views_view__' . $view->storage->id();
      }
      break;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Embeds ratings into global search page (/search).
 */
function fsa_es_preprocess_views_view(&$variables) {
  $view = $variables['view'];

  // empty($view->pager->current_page) = either not set or first page (current page = 0).
  if ($view->storage->id() == 'search_global_all' && !empty($variables['rows'][0]['#rows']) && empty($view->pager->current_page)) {
    $embed_view_id = 'search_global_ratings_embed';
    $embed_view_display = 'embed_1';

    // Get embed view.
    if ($ratings_embed_view = Views::getView($embed_view_id)) {
      // Get keywords filter value from the parent view.
      $keywords = isset($view->filter['keyword']->value) ? $view->filter['keyword']->value : NULL;

      // Get embed build.
      $ratings_embed_build = $ratings_embed_view->buildRenderable($embed_view_display, [$keywords]);
      $ratings_embed_build['#access'] = $ratings_embed_view->access($embed_view_display);

      // If there are more than 3 values, inject the ratings embed after 3rd element.
      if (count($variables['rows'][0]['#rows']) > 3) {
        array_splice($variables['rows'][0]['#rows'], 3, 0, [$ratings_embed_build]);
      }
      // If there are less than 3 values, just append at the end.
      else {
        $variables['rows'][0]['#rows'][] = $ratings_embed_build;
      }
    }
  }
}
