<?php

/**
 * @file
 * Install, update and uninstall functions for the user module.
 */

use Drupal\user\Entity\User;

/**
 * Implements hook_schema().
 */
function fsa_alerts_monitor_schema() {
  $schema['fsa_alerts_monitor'] = [
    'description' => 'Stores all monitored subscription activity data.',
    'fields' => [
      'event_id' => [
        'description' => 'The unique id of the subscription event',
        'type' => 'serial',
        'not null' => TRUE,
      ],
      'uid' => [
        'description' => 'The UID of the user',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ],
      'activity' => [
        'description' => 'The event activity',
        'type' => 'varchar_ascii',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
      ],
      'created' => [
        'description' => 'The time the event occurred',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ],
      'food_alerts' => [
        'description' => 'Comma separated alerts taxonomy tids for subscribed food alerts at the time of the event',
        'type' => 'varchar_ascii',
        'length' => 256,
        'not null' => TRUE,
        'default' => '',
      ],
      'food_alert_medium' => [
        'description' => 'What format the user requests their alert to be delivered in',
        'type' => 'varchar_ascii',
        'length' => 12,
        'not null' => TRUE,
        'default' => '',
      ],
      'allergy_alerts' => [
        'description' => 'Comma separated alerts taxonomy tids for subscribed allergy alerts at the time of the event',
        'type' => 'varchar_ascii',
        'length' => 256,
        'not null' => TRUE,
        'default' => '',
      ],
      'allergy_alert_medium' => [
        'description' => 'What format the user requests their alert to be delivered in (email|sms|both)',
        'type' => 'varchar_ascii',
        'length' => 12,
        'not null' => TRUE,
        'default' => '',
      ],
      'news_alerts' => [
        'description' => 'Comma separated alerts taxonomy tids for subscribed news alerts at the time of the event',
        'type' => 'varchar_ascii',
        'length' => 256,
        'not null' => TRUE,
        'default' => '',
      ],
      'news_alert_medium' => [
        'description' => 'What format the user requests their alert to be delivered in (email|sms|both)',
        'type' => 'varchar_ascii',
        'length' => 12,
        'not null' => TRUE,
        'default' => '',
      ],
      'consultation_alerts' => [
        'description' => 'Comma separated alerts taxonomy tids for subscribed consultation alerts at the time of the event',
        'type' => 'varchar_ascii',
        'length' => 256,
        'not null' => TRUE,
        'default' => '',
      ],
      'consultation_alert_medium' => [
        'description' => 'What format the user requests their alert to be delivered in (email|sms|both)',
        'type' => 'varchar_ascii',
        'length' => 12,
        'not null' => TRUE,
        'default' => '',
      ],
    ],
    'primary key' => ['event_id'],
    'indexes' => [
      'uid' => ['uid'],
      'created' => ['created'],
    ],
    'foreign keys' => [
      'uid' => ['users' => 'uid'],
    ]
  ];
  return $schema;
}

/**
 * Pre-fill the alerts monitoring table with Subscribe events for existing users
 * using their created date as the timestamp and their current preferences
 * to form our initial baseline.
 */
function fsa_alerts_monitor_update_8001(&$sandbox) {

  // Set up new signin service class to make it easier to get and
  // manipulate user entity field values.
  $signin_service = \Drupal::service('fsa_signin.service');

  // Set up sandbox parameters - we need it to get through
  // 24k users without timing out.
  if (!isset($sandbox['progress'])) {
    $sandbox['progress'] = 0;
    $user_count = \Drupal::database()->query('SELECT COUNT(uid) AS user_count FROM {users} WHERE NOT uid IN (SELECT uid FROM {fsa_alerts_monitor})')->fetchAssoc();
    $sandbox['max'] = $user_count['user_count'];
  }

  $result = \Drupal::database()->query('SELECT uid FROM {users} WHERE NOT uid IN (SELECT uid FROM {fsa_alerts_monitor}) LIMIT 250')->fetchAll();
  if (empty($result)) {
    $sandbox['#finished'] = TRUE;
    return;
  }

  foreach ($result as $row) {
    $user = User::load($row->uid);

    // Delivery method is the same for all alerts.
    $delivery_method = implode(',', array_filter($signin_service->alertDeliveryMethods($user)));
    $news_delivery_method = $signin_service->newsDeliveryMethod($user);
    $food_alerts = implode(',', array_filter($signin_service->subscribedFoodAlerts($user)));
    $allergy_alerts = implode(',', array_filter($signin_service->subscribedTermIds($user)));
    $news_alerts = implode(',', array_filter($signin_service->subscribedNewsAlerts($user)));
    $consultation_alerts = implode(',', array_filter($signin_service->subscribedConsultationsAlerts($user)));

    // Screen for any null values.
    $fields = [
      'delivery_method',
      'news_delivery_method',
      'food_alerts',
      'allergy_alerts',
      'news_alerts',
      'consultation_alerts',
     ];

    foreach ($fields as $field) {
      if (empty(${$field})) {
        ${$field} = '';
      }
    }

    $fields = [
      'uid' => $user->id(),
      'activity' => 'Subscription',
      'created' => $user->getCreatedTime(),
      'food_alerts' => $food_alerts,
      'food_alert_medium' => $delivery_method,
      'allergy_alerts' => $allergy_alerts,
      'allergy_alert_medium' => $delivery_method,
      'news_alerts' => $news_alerts,
      'news_alert_medium' => $news_delivery_method,
      'consultation_alerts' => $consultation_alerts,
      'consultation_alert_medium' => $delivery_method,
    ];

    \Drupal::database()
      ->insert('fsa_alerts_monitor')
      ->fields($fields)
      ->execute();

    $sandbox['progress']++;
  }

  $sandbox['#finished'] = $sandbox['progress'] >= $sandbox['max'] ? TRUE : $sandbox['progress'] / $sandbox['max'];

}

/**
 * Implements hook_uninstall().
 */
function fsa_alerts_monitor_uninstall_schema() {
  drupal_uninstall_schema('fsa_alerts_monitor');
}
