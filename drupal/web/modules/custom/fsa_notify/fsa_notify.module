<?php

/**
 * @file
 * Contains fsa_notify.module.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\fsa_notify\FsaNotifyAPIemail;
use Drupal\fsa_notify\FsaNotifyAPIsms;
use Drupal\fsa_notify\FsaNotifyMessageDaily;
use Drupal\fsa_notify\FsaNotifyMessageImmediate;
use Drupal\fsa_notify\FsaNotifyMessageSms;
use Drupal\fsa_notify\FsaNotifyMessageWeekly;
use Drupal\fsa_notify\FsaNotifyStorage;
use Drupal\fsa_notify\Plugin\QueueWorker\FsaNotifyStorageQueue;
use Drupal\node\NodeInterface;
use Drupal\user\Entity\User;
use Drupal\Component\Datetime\Time;

/**
 * Implements of template_preprocess_page().
 */
function fsa_notify_preprocess_page(&$variables) {

  // Scream a warning for admins about using notify live key and not debug-mode
  // at non-production environments.
  if (getenv("WKV_SITE_ENV") != 'prod' && !empty(array_intersect(['fsa_admin', 'administrator'], \Drupal::currentUser()->getRoles()))) {
    $killswitch = \Drupal::state()->get('fsa_notify.killswitch');
    $api_key = \Drupal::state()->get('fsa_notify.api');
    $debug = \Drupal::state()->get('fsa_notify.collect_send_log_only');

    if ($killswitch && !$debug && strpos($api_key, 'live') !== FALSE) {
      drupal_set_message(t('<strong>NB!</strong> Notify sending is enabled with the live key and next cron run could potentially send notifications to subscribers of this environment database.<br /><br />Unless you know what you are doing immediately go to <a href="/admin/config/fsa/notify">Notify settings</a> and set sending in debug mode, use test-key or disable completely.'), 'warning');
    }
  }
}

/**
 * Implements hook_form_user_form_alter().
 */
function fsa_notify_form_user_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['field_notification_sms']['#element_validate'][] = 'fsa_notify_validate';
}

/**
 * Data integrity: require phone number if user chooses sms method.
 */
function fsa_notify_validate(&$form, FormStateInterface $form_state) {

  $field = 'field_notification_method';
  $method = $form_state->getValue($field);
  if (empty($method[0]['value']) || $method[0]['value'] != 'sms') {
    return;
  }

  $field = 'field_notification_sms';
  $sms = $form_state->getValue($field);
  if (!empty($sms[0]['value'])) {
    return;
  }

  $form_state->setErrorByName($field, t('If "Notification method" is SMS then "Notification SMS" is required.'));
}

/**
 * Collect inserted alerts.
 */
function fsa_notify_entity_insert(EntityInterface $entity) {

  // Define content types that may be queued immediately to be sent via Notify.
  $types_to_send = ['alert'];

  if (!($entity instanceof NodeInterface)) {
    return;
  }
  if (!in_array($entity->getType(), $types_to_send)) {
    return;
  }

  $queue = \Drupal::service('queue')->get('fsa_notify_store');
  $data = $entity->id();
  $lang = $entity->language()->getId();
  $queue->createItem(['lang' => $lang, 'nid' => $data]);
}

/**
 * Implements hook_node_presave().
 */
function fsa_notify_node_presave(NodeInterface $node) {

  // Define content types that may be sent via Notify.
  $types_to_send = ['news', 'consultation'];
  if (!in_array($node->getType(), $types_to_send)) {
    return;
  }

  if ($node->hasField('field_alert_send') && $node->field_alert_send->value) {

    if (is_numeric($node->id())) {
      // Stamp the node sent date field with current time. Informational only.
      $node->field_alert_send_timestamp[] = date('Y-m-d\TH:i:s', \Drupal::service('datetime.time')->getCurrentTime());

      $queue = \Drupal::service('queue')->get('fsa_notify_store');
      $data = $node->id();
      $lang = $node->language()->getId();
      $queue->createItem(['lang' => $lang, 'nid' => $data]);

      // Let user know the alert was queued.
      drupal_set_message(
        t('This @type item was queued to be sent as alert for all subscribers',
          ['@type' => $node->getType()]
        ),
        'warning');
    }
    else {
      // Let user know the item was not sent and prompt to re-edit.
      // This happens when creating a new node but is a borderline case.
      drupal_set_message(
        t(
          'Queuing @type to an alert failed.<br />Edit again and re-select the "<em>@label</em>" checkbox',
          [
            '@type' => $node->getType(),
            '@label' => $node->field_alert_send->getItemDefinition()->getFieldDefinition()->getLabel(),
          ]
        ),
        'error');
    }
  }

  // And unset the alert sending checkbox.
  $node->field_alert_send = 0;
}

/**
 * Implements hook_form_alter().
 */
function fsa_notify_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  if (isset($form['field_alert_send'])) {
    $form['field_alert_send']['#prefix'] = '<hr />';
  }

  // Unset widget settings from alert sent timestamp field.
  $field = 'field_alert_send_timestamp';
  if (!empty($form[$field])) {
    // Prevent editors tampering the the field values.
    $form[$field]['#disabled'] = 'disabled';
    $form[$field]['widget']['add_more']['#access'] = FALSE;

    // Remove the dragging + weight options on the form.
    $form[$field]['widget']['#cardinality_multiple'] = FALSE;
    foreach ($form[$field]['widget'] as $key => $value) {
      if (is_numeric($key)) {
        unset($form[$field]['widget'][$key]['#theme_wrappers']);
        unset($form[$field]['widget'][$key]['_weight']);

        // Remove the last empty item.
        if ($form[$field]['widget'][$key]['value']['#default_value'] === NULL) {
          unset($form[$field]['widget'][$key]);
        }
      }
    }
    if ($form[$field]['widget']['#max_delta'] > 0) {
      $form[$field]['#prefix'] = '<strong>' . t('This item has been previously marked to be sent on') . '</strong>';
    }

  }
}

/**
 * Notify cron job.
 *
 * Keep all stuff as abstract as possible here so that it would be easy to
 * understand highlevel workflow just major decisions and major tasks.
 */
function fsa_notify_cron() {

  $state_key = 'fsa_notify.killswitch';
  $killswitch = \Drupal::state()->get($state_key);
  if (empty($killswitch)) {
    return;
  }

  // Process alerts
  // (insert it into each user cache who wants to be notified)
  fsa_notify_queue_process();

  /* now start sending */

  // Prepare.
  $notifier_sms = new FsaNotifyAPIsms();
  $notifier_email = new FsaNotifyAPIemail();
  $storage = new FsaNotifyStorage();

  // Sms.
  $formatter = new FsaNotifyMessageSms();
  fsa_notify_send($storage, $notifier_sms, $formatter, 'sms');

  // Immediate.
  $formatter = new FsaNotifyMessageImmediate();
  fsa_notify_send($storage, $notifier_email, $formatter, 'immediate');

  // Daily.
  $state_key = 'fsa_notify.last_daily';
  $formatter = new FsaNotifyMessageDaily();
  if (fsa_notify_daily_is_ready_to_send($state_key)) {
    fsa_notify_send($storage, $notifier_email, $formatter, 'daily');
    fsa_notify_sent($state_key);
  }

  // Weekly.
  $state_key = 'fsa_notify.last_weekly';
  $formatter = new FsaNotifyMessageWeekly();
  if (fsa_notify_weekly_is_ready_to_send($state_key)) {
    fsa_notify_send($storage, $notifier_email, $formatter, 'weekly');
    fsa_notify_sent($state_key);
  }
}

/**
 * Store the last sent status.
 *
 * @param string $state_key
 *   The state key to set (fsa_notify.last_daily|fsa_notify.last_weekly).
 */
function fsa_notify_sent($state_key) {
  $now = time();
  $last = \Drupal::state()->set($state_key, $now);
}

/**
 * Check if daily digests are ready to be sent.
 *
 * @param string $state_key
 *   The state key (fsa_notify.last_daily|fsa_notify.last_weekly)
 * @param int $now
 *   Timestamp for testing purposes.
 *
 * @return bool
 *   Boolean if daily digests are ready to send.
 */
function fsa_notify_daily_is_ready_to_send($state_key, $now = NULL) {
  // $now argument is used only for algorithm testing purposes.
  if (empty($now)) {
    $now = time();
  }
  $window = 3 * 60 * 60;
  $interval = 24 * 60 * 60;
  // Calculation base: seconds since 00:00:00.
  $start = 7 * 60 * 60;
  $current = date('G', $now) * 60 * 60 + date('i', $now) * 60 + date('s', $now);
  $ready = fsa_notify_is_ready_to_send($state_key, $window, $interval, $start, $current, $now);
  return $ready;
}

/**
 * Check if weekly digests are ready to send.
 *
 * @param string $state_key
 *   The state key (fsa_notify.last_daily|fsa_notify.last_weekly)
 * @param int $now
 *   Timestamp for testing purposes.
 *
 * @return bool
 *   Boolean if weekly digests are ready to send.
 */
function fsa_notify_weekly_is_ready_to_send($state_key, $now = NULL) {
  // $now argument is used only for algorithm testing purposes.
  if (empty($now)) {
    $now = time();
  }
  $window = 5 * 60 * 60;
  $interval = 7 * 24 * 60 * 60;
  // Calculation base: 1 (for Monday) through 7 (for Sunday)
  $start = 1 * 24 * 60 * 60 + 7 * 60 * 60;
  $current = date('N', $now) * 24 * 60 * 60 + date('G', $now) * 60 * 60 + date('i', $now) * 60 + date('s', $now);
  $ready = fsa_notify_is_ready_to_send($state_key, $window, $interval, $start, $current, $now);
  return $ready;
}

/**
 * Check if batch is ready for notify to send.
 *
 * @param string $state_key
 *   Drupal state to get/set related info.
 * @param int $window
 *   Duration window for sending out emails.
 * @param int $interval
 *   Duration between beginnings of two sendings.
 * @param int $start
 *   Arbitrary start timestamp, in context of interval.
 * @param int $current
 *   Arbitrary current timestamp, in context of interval.
 * @param null|int $now
 *   Now argument is used only for algorithm testing purposes.
 *
 * @return bool
 *   Boolean if ready to send.
 */
function fsa_notify_is_ready_to_send($state_key, $window, $interval, $start, $current, $now = NULL) {
  if (empty($now)) {
    $now = time();
  }

  $last = \Drupal::state()->get($state_key);
  if (empty($last)) {
    fsa_notify_sent($state_key);
    return TRUE;
  }

  // Is elapsed enough time since last time.
  $is_elapsed_enough = $now - $last;
  // So that we wont send out emails each time later and later.
  $is_elapsed_enough = $is_elapsed_enough > $interval - $window;

  $is_in_window = $start <= $current && $current < $start + $window;

  return $is_elapsed_enough && $is_in_window;
}

/**
 * Process queued alerts.
 */
function fsa_notify_queue_process() {

  $queue = Drupal::service('queue')->get('fsa_notify_store');
  $worker = Drupal::service('plugin.manager.queue_worker')->createInstance('fsa_notify_store');

  fsa_notify_timer('start', 'queue');

  // The lease time is set to ten years, just in case this process crashes and
  // it's picked up by a later cron.
  while ($item = $queue->claimItem(315360000)) {
    try {
      \Drupal::logger('fsa_notify')->info("Processing item " . $item->data['nid']);
      $worker->processItem($item->data);
      \Drupal::logger('fsa_notify')->info("Deleting item " . $item->data['nid']);
      $queue->deleteItem($item);
    }
    catch (FsaNotifyStorageQueue $e) {
      // We've thrown an exception - do not release the item otherwise it might
      // get picked up again.
      \Drupal::logger('fsa_notify')->error("Some odd thing occurred during queue processing. Item remains held");
      break;
    }
    catch (\Exception $e) {
      watchdog_exception('fsa_notify', $e);
    }
    fsa_notify_timer('count', 'queue');
  }

  fsa_notify_timer('stop', 'queue');

}

/**
 * Send to notify.
 *
 * @param \Drupal\fsa_notify\FsaNotifyStorage $storage
 *   FsaNotifyStorage object.
 * @param object $notifier
 *   Notifier object.
 * @param object $formatter
 *   Notifymessage formatter object.
 * @param string $type
 *   Type of send (SMS/immediate/digest).
 */
function fsa_notify_send(FsaNotifyStorage $storage, $notifier, $formatter, $type) {
  fsa_notify_timer('start', $type);
  $batch = $storage->getAllType($type);
  foreach ($batch as $uid => $messages) {
    $user = User::load($uid);
    $lang = $user->getPreferredLangcode(TRUE);
    $messages = $formatter->format($messages, $lang);
    foreach ($messages as $personalisation) {
      try {
        $notifier->send($user, $type, $personalisation);
      }
      catch (\Exception $e) {
        \Drupal::logger('fsa_notify')->error("Exception thrown during send. Moving on");
      }
      fsa_notify_timer('count', $type);
    }
    $storage->reset($user, $type);
  }
  \Drupal::entityManager()->getStorage('node')->resetCache();
  \Drupal::entityManager()->getStorage('user')->resetCache();
  fsa_notify_timer('stop', $type);
}

/**
 * The timer for notify process.
 *
 * @param string $event
 *   Type of the event (start|count|stop).
 * @param string $type
 *   The type (SMS/immediate/digest).
 */
function fsa_notify_timer($event, $type) {

  static $cache = [];

  switch ($event) {

    case 'start':
      $cache[$type] = [
        'start' => microtime(TRUE),
        'count' => 0,
      ];
      break;

    case 'count':
      $cache[$type]['count']++;
      break;

    case 'stop':
      $stop = microtime(TRUE);
      $start = $cache[$type]['start'];
      $items = $cache[$type]['count'];
      unset($cache[$type]);
      if ($items == 0) {
        // Dont fill logs with zeros.
        break;
      }
      $elapsed = $stop - $start;
      $rate = $elapsed > 0 ? $items / $elapsed : 'n/a';
      $elapsed = sprintf('%.3f', $elapsed);
      $rate = sprintf('%.3f', $rate);
      $memory = memory_get_peak_usage(TRUE);
      \Drupal::logger('fsa_notify')->info('Timer: type %type; elapsed %elapsed; %items items; %rate items/sec. memory_get_peak_usage reporting %memory', [
        '%type' => $type,
        '%elapsed' => $elapsed,
        '%items' => $items,
        '%rate' => $rate,
        '%memory' => $memory,
      ]);
      break;
  }

}
