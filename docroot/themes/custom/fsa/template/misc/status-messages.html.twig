{#
/**
 * @file
 * Theme override for status messages.
 *
 * Displays status, error, and warning messages, grouped by type.
 *
 * An invisible heading identifies the messages for assistive technology.
 * Sighted users see a colored box. See http://www.w3.org/TR/WCAG-TECHS/H69.html
 * for info.
 *
 * Add an ARIA label to the contentinfo area so that assistive technology
 * user agents will better describe this landmark.
 *
 * Available variables:
 * - message_list: List of messages to be displayed, grouped by type.
 * - status_headings: List of all status types.
 * - display: (optional) May have a value of 'status' or 'error' when only
 *   displaying messages of that specific type.
 * - attributes: HTML attributes for the element, including:
 *   - class: HTML classes.
 */
#}

{{ attach_library('classy/messages') }}
{% block messages %}
<div class="message-list">
{% for type, messages in message_list %}
  {%
    set classes = [
      'message-list__item',
      'message-list__item--' ~ type,
    ]
  %}
  {% if type == 'error' %}
    <div role="alert" class="error-summary" aria-labelledby="error-summary-heading" tabindex="-1">
      <h2 id="error-summary-heading" class="error-summary-heading">
        {% trans %}There is a problem with your submission{% endtrans %}
      </h2>
  {% else %}
    <div role="contentinfo" aria-label="{{ status_headings[type] }}"{{ attributes.addClass(classes)|without('role', 'aria-label') }}>
  {% endif %}
      {% if messages|length > 1 %}
        <ul class="messages__list">
          {% for message in messages %}
            <li class="messages__item">{{ message }}</li>
          {% endfor %}
        </ul>
      {% else %}
        {{ messages|first }}
      {% endif %}
  </div>
  {# Remove type specific classes. #}
  {% set attributes = attributes.removeClass(classes) %}
{% endfor %}
</div>
{% endblock messages %}

