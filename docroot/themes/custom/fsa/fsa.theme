<?php

/**
 * @file
 * Functions to support theming in the fsa.
 */

// Add all preprocess hooks to respective files:
require_once 'inc/html.inc';
require_once 'inc/node.inc';
require_once 'inc/field.inc';
require_once 'inc/fieldset.inc';
require_once 'inc/page.inc';
require_once 'inc/media.inc';
require_once 'inc/fsa-ratings-search-page.inc';
require_once 'inc/video_embed_iframe__youtube.inc';

/**
 * Implements hook_page_attachments_alter().
 */
function fsa_page_attachments_alter(&$variables) {

  $path_to_theme = '/' . drupal_get_path('theme', 'fsa') . '/';
  $path_to_images = '/' . drupal_get_path('theme', 'fsa') . '/dist/img/favicon/';

  // Normal favicon.
  foreach ($variables['#attached']['html_head_link'] as $key => $headitem) {
    if ($headitem[0]['rel'] == 'shortcut icon') {
      $variables['#attached']['html_head_link'][$key][0]['href'] = $path_to_theme . 'favicon.ico';
    }
  }

  // Apple touch icon.
  $apple = [
    '#tag' => 'link',
    '#attributes' => [
      'href' => $path_to_images . 'apple-touch-icon.png',
      'rel' => 'apple-touch-icon',
      'sizes' => '180x180',
    ],
  ];
  $variables['#attached']['html_head'][] = [$apple, 'apple-touch-icon'];

  // Larger favicons.
  $favicon_sizes = [16, 32];
  foreach ($favicon_sizes as $size) {
    $favicon = [
      '#tag' => 'link',
      '#attributes' => [
        'href' => $path_to_images . 'favicon-' . $size . 'x' . $size . '.png',
        'rel' => 'icon',
        'sizes' => $size . 'x' . $size,
      ],
    ];
    $variables['#attached']['html_head'][] = [$favicon, 'favicon-' . $size];
  }

  // Manifest.
  $manifest = [
    '#tag' => 'link',
    '#attributes' => [
      'href' => $path_to_theme . 'manifest.json',
      'rel' => 'manifest',
    ],
  ];
  $variables['#attached']['html_head'][] = [$manifest, 'manifest'];

  // Safari pinned tab.
  $safari = [
    '#tag' => 'link',
    '#attributes' => [
      'href' => $path_to_theme . 'safari-pinned-tab.svg',
      'rel' => 'mask-icon',
      'color' => '#007ac9',
    ],
  ];
  $variables['#attached']['html_head'][] = [$safari, 'safari'];

  // Theme-color.
  $themecolor = [
    '#tag' => 'meta',
    '#attributes' => [
      'name' => 'theme-color',
      'content' => '#ffffff',
    ],
  ];
  $variables['#attached']['html_head'][] = [$themecolor, 'themecolor'];

  // Google fonts.
  $googlefonts = [
    '#tag' => 'link',
    '#attributes' => [
      'rel' => 'stylesheet',
      'href' => 'https://fonts.googleapis.com/css?family=Fira+Sans:300,400,500,700|Open+Sans:300,400,600,700&amp;subset=latin-ext',
    ],
  ];
  $variables['#attached']['html_head'][] = [$googlefonts, 'googlefonts'];

  $parameters = \Drupal::routeMatch()->getParameters();

  if ($parameters->has('node')) {
    $node = $parameters->get('node');

    if (\Drupal\fsa_multipage_guide\FSAMultiPageGuide::IsGuide($node)) {
      $guide = \Drupal\fsa_multipage_guide\FSAMultiPageGuide::Get($node);
      $first_page_url = $guide->getFirstPageUrl();

      if (!empty($first_page_url)) {
        foreach ($variables['#attached']['html_head'] as $ref => $head_attachment) {
          if (!empty($head_attachment[1]) && $head_attachment[1] === 'canonical_url') {
            $variables['#attached']['html_head'][$ref][0]['#attributes']['href'] = $first_page_url;
          }
        }
      }
    }
  }

}

/**
 * Implements hook_preprocess_breadcrumb().
 */
function fsa_preprocess_breadcrumb(&$variables) {
  // Skip any pages that have an empty breadcrumb trail.
  if (empty($variables['breadcrumb'])) {
    return;
  }

  // Treat final breadcrumb entry as the current page, and add aria-current attribute.
  $last_item_index = count($variables['breadcrumb']);
  // Decrement count value separately to keep PHPCS happy.
  $last_item_index--;
  $variables['breadcrumb'][$last_item_index]['attributes']['aria-current'] = 'page';
}
