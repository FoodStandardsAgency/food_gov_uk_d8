<?php

/**
 * @file
 * Contains fsa_content_reminder.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\views\ViewExecutable;
use Drupal\Core\Url;
use Drupal\Core\Datetime\DrupalDateTime;
use Drupal\node\Entity\Node;

/**
 * Implements hook_help().
 */
function fsa_content_reminder_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.fsa_content_reminder':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Sends content reminders to authors') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_mail().
 */
function fsa_content_reminder_mail($key, &$message, $params) {
  $options = [
    'langcode' => $message['langcode'],
  ];
  switch ($key) {
    case 'content_reminder':
      $message['from'] = \Drupal::config('system.site')->get('mail');
      $message['subject'] = t('Content has reached its long-term review date: @title (@language content)', ['@title' => $params['node_title'], '@language' => $params['node_lang']], $options);
      $message['body'][] = $params['message'];
      break;
  }
}

/**
 * Implements hook_form_alter().
 */
function fsa_content_reminder_form_alter(&$form, $form_state, $form_id) {

  // Move content reminder date below publishing options on node forms.
  $form_ids = [
    'node_page_form',
    'node_page_edit_form',
    'node_consultation_form',
    'node_consultation_edit_form',
    'node_research_project_form',
    'node_research_project_edit_form',
  ];
  if (in_array($form_id, $form_ids)) {
    if (isset($form['field_content_reminder'])) {
      $form['field_content_reminder']['#group'] = 'footer';
    }
  }
}

/**
 * Implements hook_views_pre_view().
 */
function fsa_content_reminder_views_pre_view(ViewExecutable $view, $display_id, array &$args) {

  // Display the email address to which the reminders are sent to (or error
  // message in case it is not defined in configurations).
  if ($view->id() == 'content_reminders') {
    $config = \Drupal::config('fsa_content_reminder.settings');
    $email = $config->get('email');

    $url = Url::fromRoute('fsa_content_reminder.settings', []);
    $url->setOption('query', \Drupal::destination()->getAsArray());
    $config_url = $url->toString();

    if ($email == '') {
      // Email is not set, let user know about it.
      $content = t('Content reminder emails are not being sent because no email is defined in <a href="@url">Content reminder settings</a>', ['@url' => $config_url]);
      $status = 'error';
    }
    else {
      $content = t('Content reminder emails are sent to <a href="mailto:@email">@email</a>. Administrator can configure this in <a href="@url">Content reminder settings</a>', ['@email' => $email, '@url' => $config_url]);
      $status = 'status';
    }

    drupal_set_message($content, $status);
  }
}

/**
 * Implements hook_cron().
 */
function fsa_content_reminder_cron() {

  $next_dispatch = \Drupal::state()->get('fsa_content_reminder.next_dispatch');
  $config = \Drupal::config('fsa_content_reminder.settings');
  $to = $config->get('email');

  if (\Drupal::service('email.validator')->isValid($to) && ($next_dispatch == '' || $next_dispatch < time())) {

    // Define base_url. drupal/fsa_notify/src/FsaNotifyMessage::baseUrl() has
    // this same functionality.
    // @todo: consider moving this logic into a service.
    switch (getenv("WKV_SITE_ENV")) {
      case 'local':
        $base_url = 'https://local.food.gov.uk';
        break;

      case 'development':
        $base_url = 'https://fsa.dev.wunder.io';
        break;

      case 'stage':
        $base_url = 'https://fsa.stage.wunder.io';
        break;

      default:
        $base_url = 'https://www.food.gov.uk';
        break;
    }

    $mailManager = \Drupal::service('plugin.manager.mail');
    $module = 'fsa_content_reminder';
    $key = 'content_reminder';

    $languages = \Drupal::languageManager()->getLanguages();

    // Get now time to get match for content reminder date same day for
    // dispatching the reminders.
    $now = new DrupalDateTime('now');

    $query = \Drupal::entityQuery('node');
    $query->condition('field_content_reminder', $now->format('Y-m-d'), '=');
    $query->condition('field_content_reminder', NULL, 'IS NOT');
    $nids = $query->execute();

    foreach ($nids as $nid) {
      $entity = Node::load($nid);

      // Loop through possible translations.
      foreach ($languages as $language) {

        $langcode = $language->getId();
        // Get translation(s) if they exist.
        if (count($entity->getTranslationLanguages(FALSE)) > 0) {
          $entity = $entity->getTranslation($langcode);
          $translated = TRUE;
        }
        else {
          $translated = FALSE;
        }

        $node_language = $entity->language()->getName();
        $node_title = $entity->label();
        if ($entity->hasField('field_content_reminder')) {
          $time = strtotime($entity->get('field_content_reminder')->getValue()[0]['value']);
          $node_review_date = \Drupal::service('date.formatter')->format($time, 'short');
        }
        else {
          $node_review_date = \Drupal::service('date.formatter')->format($entity->getCreatedTime(), 'short');
        }
        $node_updated = $entity->getChangedTime();
        $node_updated = \Drupal::service('date.formatter')->format($node_updated, 'long');
        $node_edit_link = $base_url . '/node/' . $entity->id() . '/edit';
        $node_view_link = $base_url . '/node/' . $entity->id();

        $params['message'] = "$node_language content \"$node_title\" has reached it's long-term review date on $node_review_date

Page information:
* Last updated: $node_updated
* View: $node_view_link
* Edit: $node_edit_link

Please check this content and complete one of the following actions:
* If it's still up-to-date and relevant reset the review date.
* If it requires updating, complete the updates and reset the review date.
* If it's no longer required, archive the content.

Full list of content pending long-term review: 
* $base_url/admin/content/content-reminders
";
        $params['node_lang'] = $node_language;
        $params['node_title'] = $entity->label();
        $send = TRUE;
        $result = $mailManager->mail($module, $key, $to, $langcode, $params, NULL, $send);

        if ($result['result'] !== TRUE) {
          _fsa_content_reminder_sent(FALSE, $nid, $to);
        }
        else {
          _fsa_content_reminder_sent(TRUE, $nid, $to);
        }

        if (!$translated) {
          // Prevent sending duplicates in case there was no translations for
          // the entity.
          break;
        }
      }

    }

  }
}

/**
 * Store the timestamp of last succesful content reminder sending and log it.
 *
 * @param bool $success
 *   Sending success.
 * @param int $nid
 *   Node id.
 */
function _fsa_content_reminder_sent($success, $nid, $email) {
  if ($success) {
    \Drupal::logger('fsa_content_reminder')->info(t("Content reminder email sent to @email about node/@nid.", ['@nid' => $nid, '@email' => $email]));
  }
  else {
    \Drupal::logger('fsa_content_reminder')->error(t("There was a problem sending the content reminder email for node/@nid.", ['@nid' => $nid]));
  }

  // Set the state to try again tomorrow.
  $tomorrow = strtotime('+1 day', time());
  \Drupal::state()->set('fsa_content_reminder.next_dispatch', $tomorrow);
}
