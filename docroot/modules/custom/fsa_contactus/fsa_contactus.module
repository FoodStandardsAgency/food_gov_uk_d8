<?php

/**
 * @file
 * Contains fsa_contactus.module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\fsa_custom\FsaCustomHelper;
use Drupal\block\Entity\Block;
use Drupal\node\NodeInterface;

/**
 * Implements hook_webform_element_alter().
 */
function fsa_contactus_webform_element_alter(array &$element, FormStateInterface $form_state, array $context) {
  // Add custom data attributes to all elements.
  $extra_classes = [];
  if (isset($element['#type'])) {
    $extra_classes[] = $element['#type'];
    if (isset($element['#format'])) {
      $extra_classes[] = $element['#format'];
    }
    $extra_classes[] = $element['#webform_key'];
    foreach ($extra_classes as $c) {
      $element['#attributes']['class'][] = $c;
    }
  }

  // Mark optional elements as suggested by GDS, do not apply on fieldsets,
  // pages etc.
  $ignored_elements = ['fieldset', 'webform_wizard_page'];
  if ((!isset($element['#required']) && isset($element['#title'])) && !isset($element['#states']['required']) && !in_array($element['#type'], $ignored_elements)) {
    $element['#title'] = $element['#title'] . ' <span class="optional">(' . t('optional') . ')</span>';
  }

  // Rewrite rafp privacy notice field to the required link.
  if ($element['#webform_key'] == 'fsa_privacy_link_rafp') {
    $element['#markup'] = FsaCustomHelper::privacyNoticeLink('rafp');
  }

  // Rewrite ncfu privacy notice field to the required link.
  if ($element['#webform_key'] == 'fsa_privacy_link_nfcu') {
    $element['#markup'] = FsaCustomHelper::privacyNoticeLink('nfcu');
  }

}

/**
 * Implements template_preprocess_webform_progress().
 */
function fsa_contactus_preprocess_webform_progress(array &$variables) {

  if (isset($variables['summary'])) {
    // Change webform default "Page ..." to "Step ...".
    $variables['summary'] = t('Step @start of @end', $variables['summary']->getArguments());
  }
}

/**
 * Implements template_preprocess_webform_container_base_html().
 *
 * @param array $variables
 *   Fieldset element.
 */
function fsa_contactus_preprocess_webform_container_base_html(array &$variables) {

  if (isset($variables['webform_submission']) && isset($variables['value']['#id'])) {
    if ($audience = $variables['webform_submission']->getElementData('audience')) {

      // Get fieldset identifier.
      $id = $variables['value']['#id'];

      // Conditionally remove fieldset. Business fields should be hidden from
      // the consumer, and visa versa.
      $con_bus = $audience == 'consumer' && $id == 'food_fraud_crime--business';
      $bus_con = $audience == 'business' && $id == 'food_fraud_crime--consumer';
      if ($con_bus || $bus_con) {
        $variables = [];
      }
    }
  }

}

/**
 * Implements hook_form_alter().
 */
function fsa_contactus_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  // Add the service name to user satisfaction form hidden field.
  if (isset($form['#webform_id']) && $form['#webform_id'] == 'user_satisfaction') {
    $route_match = \Drupal::routeMatch();
    $title = \Drupal::service('title_resolver')->getTitle(\Drupal::request(), $route_match->getRouteObject());

    // Get page title.
    if (is_object($title)) {
      $page_title = $title->render();
    }
    elseif (is_string($title)) {
      $page_title = $title;
    }

    // Make sure captured service name is human-friendly and it make sense.
    if ($route_match->getRouteName() == 'fsa_signin.user_registration_thank_you') {
      $service = 'Alerts subscription';
    }
    elseif (isset($page_title)) {
      // In most cases we are happy with actual page title.
      $service = $page_title;
    }
    else {
      // If getting the page title failed get default from the webform
      // configuration.
      $service = $form['elements']['service']['#value'];
    }

    $form['elements']['service']['#value'] = $service;
  }
}

/**
 * Implements template_preprocess_page().
 */
function fsa_contactus_preprocess_page(array &$variables) {
  /* @var $route_name = \Symfony\Component\Routing\Route\routeMatch() */
  $route = \Drupal::routeMatch();

  if (isset($variables['node']) && $variables['node'] instanceof NodeInterface && $variables['node']->hasField('webform')) {
    // Webforms id's we want the user satisfaction form to be attached to.
    $webform_ids = [
      'foreign_object',
      'poor_hygiene_practices',
      'food_poisoning',
      'food_fraud_crime',
    ];
    $webform = $variables['node']->get('webform')->getValue();
    $webform_page = \Drupal::request()->query->get('page');

    // Add the satisfaction survey once user proceeded to the end of the
    // form submission flow, to the "webform_confirmation" page.
    if ($webform_page == 'webform_confirmation' && in_array($webform[0]['target_id'], $webform_ids)) {
      fsa_attach_satisfaction_form($variables);
    }
  }

  // Attach the user satisfaction form to alerts subscribe thank you page and
  // extend condition(s) here if the survey should be on other routes.
  if ($route->getRouteName() == 'fsa_signin.user_registration_thank_you') {
    fsa_attach_satisfaction_form($variables);
  }
}

/**
 * Get and attach a form block to page template.
 *
 * @param array $variables
 *   Page template variables.
 * @param string $block_id
 *   ID of the block to attach.
 */
function fsa_attach_satisfaction_form(array &$variables, $block_id = 'user_satisfaction_form') {

  if (is_object($block = Block::load($block_id))) {
    $block = \Drupal::entityTypeManager()->getViewBuilder('block')->view($block);

    // Introduce a variable to display the form via twig template.
    $variables['satisfaction_form'] = render($block);
  }
}
